/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Wilhelm.von.3D (https://sketchfab.com/Wilhelm.von.3D)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/blue-brain-a7943aec0f0440b38c94c1533c0df217
Title: Blue Brain
*/

import { useRef, useMemo } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import * as THREE from 'three'

export function Brain(props) {
  const group = useRef()
  const { nodes, materials } = useGLTF('/models/blue_brain.glb')
  
  // Create wireframe material
  const wireframeMaterial = useMemo(() => {
    return new THREE.MeshBasicMaterial({
      color: '#00ffff',
      wireframe: true,
      transparent: true,
      opacity: 0.8
    })
  }, [])
  
  // Add continuous rotation and pulsing animation
  useFrame((state, delta) => {
    if (group.current) {
      // Rotate the brain
      group.current.rotation.y += delta * 0.3
      
      // Create pulsing effect with subtle scaling
      const pulseSpeed = 1.0
      const pulseMagnitude = 0.02
      const pulse = Math.sin(state.clock.elapsedTime * pulseSpeed) * pulseMagnitude
      
      group.current.scale.x = (props.scale || 1) * (1 + pulse)
      group.current.scale.y = (props.scale || 1) * (1 + pulse)
      group.current.scale.z = (props.scale || 1) * (1 + pulse)
      
      // Make material pulse with opacity
      if (props.wireframe && wireframeMaterial) {
        wireframeMaterial.opacity = 0.6 + Math.sin(state.clock.elapsedTime * 2) * 0.2
      }
    }
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_2.geometry}
        material={props.wireframe ? wireframeMaterial : materials.defaultMat}
        rotation={[-Math.PI / 2, 0, 0]}
      />
    </group>
  )
}

useGLTF.preload('/models/blue_brain.glb')