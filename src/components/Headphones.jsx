/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: re1monsen (https://sketchfab.com/re1monsen)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/headphones-b12a7fb702804cc19537047a033fe0d9
Title: Headphones
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useMotionValue, useSpring } from "motion/react"
import { useFrame } from "@react-three/fiber"
import PropTypes from 'prop-types'

export function Headphones(props) {
  const group = useRef()
  const { nodes, materials } = useGLTF('/models/headphones.glb')
    // Add animation code from Astronaut component
  const yPosition = useMotionValue(5)
  const ySpring = useSpring(yPosition, { damping: 30 })
  
  useEffect(() => {
    ySpring.set(-1)
  }, [ySpring])
  
  useFrame(() => {
    group.current.position.y = ySpring.get()
  })
  
  return (
    <group 
      ref={group}
      {...props} 
      dispose={null}
      position={props.position || [-5, 0, -5]}
      scale={props.scale || 30.0}
    >
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.001}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones006_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones001_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones002_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones003_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones004_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones005_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones010_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones007_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones008_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones009_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones011_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones012_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones013_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones014_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones015_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones016_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Headphones017_low_Headphones_0.geometry}
            material={materials.Headphones}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
        </group>
      </group>
    </group>  )
}

// Add PropTypes validation for the component
Headphones.propTypes = {
  position: PropTypes.array,
  dispose: PropTypes.any,
  rotation: PropTypes.array,
  scale: PropTypes.oneOfType([PropTypes.number, PropTypes.array])
}

useGLTF.preload('/models/headphones.glb')