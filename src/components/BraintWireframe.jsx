/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: oxterium (https://sketchfab.com/oxterium)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/brain-hologram-09d686a1a1f745cba6b2385d0c831214
Title: Brain hologram
*/

import { useRef, useMemo } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import * as THREE from 'three'

export function Braint(props) {
  const group = useRef()
  const { nodes } = useGLTF('/models/brain_hologram.glb')
  
  // Create wireframe materials
  const wireframeMaterials = useMemo(() => {
    const particle1Material = new THREE.MeshBasicMaterial({
      color: '#00ffff',
      wireframe: true,
      transparent: true,
      opacity: 0.8
    })
    
    const particle2Material = new THREE.MeshBasicMaterial({
      color: '#7f00ff',
      wireframe: true,
      transparent: true,
      opacity: 0.6
    })
    
    return { particle1Material, particle2Material }
  }, [])
  
  // Add continuous rotation and pulsing animation
  useFrame((state, delta) => {
    if (group.current) {
      // Rotate the brain
      group.current.rotation.y += delta * 0.3
      
      // Create pulsing effect with subtle scaling
      const pulseSpeed = 1.5
      const pulseMagnitude = 0.05
      const pulse = Math.sin(state.clock.elapsedTime * pulseSpeed) * pulseMagnitude
      
      group.current.scale.x = (props.scale || 1) * (1 + pulse)
      group.current.scale.y = (props.scale || 1) * (1 + pulse)
      group.current.scale.z = (props.scale || 1) * (1 + pulse)
      
      // Make materials pulse with opacity
      wireframeMaterials.particle1Material.opacity = 0.6 + Math.sin(state.clock.elapsedTime * 2) * 0.2
      wireframeMaterials.particle2Material.opacity = 0.4 + Math.cos(state.clock.elapsedTime * 2) * 0.2
    }
  })
  
  
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group
            name="07e8ba9162674e488df6dd56fc54b2e3fbx"
            rotation={[Math.PI / 2, 0, 0]}
            scale={0.01}>
            <group name="Object_2">
              <group name="RootNode">
                <group name="Icosphere001" rotation={[-Math.PI / 2, 0, -2.734]} scale={100}>
                  <mesh
                    name="Icosphere001_Particle_2_0"
                    geometry={nodes.Icosphere001_Particle_2_0.geometry}
                    material={wireframeMaterials.particle2Material}
                  />
                  <mesh
                    name="Icosphere001_Particle_2_0_1"
                    geometry={nodes.Icosphere001_Particle_2_0_1.geometry}
                    material={wireframeMaterials.particle2Material}
                  />
                  <mesh
                    name="Icosphere001_Particle_2_0_2"
                    geometry={nodes.Icosphere001_Particle_2_0_2.geometry}
                    material={wireframeMaterials.particle2Material}
                  />
                  <mesh
                    name="Icosphere001_Particle_1_0"
                    geometry={nodes.Icosphere001_Particle_1_0.geometry}
                    material={wireframeMaterials.particle1Material}
                  />
                  <mesh
                    name="Icosphere001_Particle_1_0_1"
                    geometry={nodes.Icosphere001_Particle_1_0_1.geometry}
                    material={wireframeMaterials.particle1Material}
                  />
                  <mesh
                    name="Icosphere001_Particle_1_0_2"
                    geometry={nodes.Icosphere001_Particle_1_0_2.geometry}
                    material={wireframeMaterials.particle1Material}
                  />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/brain_hologram.glb')
