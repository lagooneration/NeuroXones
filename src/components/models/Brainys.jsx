/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useMemo } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import * as THREE from 'three'

export function Brainy(props) {
  const { nodes, materials } = useGLTF('/models/brain.glb')
  const meshRef = useRef()
  const wireframeRef = useRef()
  
 // Create wireframe material with better colors
   const wireframeMaterial = useMemo(() => {
     return new THREE.MeshBasicMaterial({
       color: new THREE.Color('#4086f4'), // Electric blue
       wireframe: true,
       transparent: true,
       opacity: 0.8,
       wireframeLinewidth: 1
     })
   }, [])
 
   // Create a glow material for subtle highlights
   const glowMaterial = useMemo(() => {
     return new THREE.MeshBasicMaterial({
       color: new THREE.Color('#00ffff'), // Cyan for glow
       transparent: true,
       opacity: 0.2,
       side: THREE.BackSide
     })
   }, [])
 
   // Add animation effects
   useFrame((state) => {
     if (meshRef.current) {
       // Subtle rotation animation
     //   meshRef.current.rotation.x += 0.002;
       
       // Pulsing opacity based on time
       const pulseSpeed = 1.0;
       const pulseAmount = 0.2;
       const t = state.clock.getElapsedTime();
       wireframeMaterial.opacity = 0.6 + Math.sin(t * pulseSpeed) * pulseAmount;
       
       // Subtle color shift over time
       const hue = (t * 0.05) % 1;
       wireframeMaterial.color.setHSL(hue, 0.8, 0.5);
     }
   });
 
  
  // Create a wireframe material for the additional wireframe mesh
  // const wireframeMaterial = useMemo(() => {
  //   return new THREE.MeshBasicMaterial({
  //     color: new THREE.Color('#6ca0ff'), // Light blue color for contrast
  //     wireframe: true,
  //     transparent: true,
  //     opacity: 0.3,
  //   });
  // }, []);
  
  // Update the shader uniforms for animation
  // useFrame((state) => {
  //   if (meshRef.current) {
  //     // Update time for animation
  //     meshRef.current.material.uniforms.time.value = state.clock.elapsedTime;
      
  //     // Mouse position affects neural activity intensity
  //     const mouseX = state.mouse.x; // -1 to 1
  //     const mouseY = state.mouse.y; // -1 to 1
      
  //     // Update mouse position uniform
  //     meshRef.current.material.uniforms.mousePosition.value.set(mouseX, mouseY);
      
  //     // Calculate distance from mouse to center (0,0)
  //     const mouseDistFromCenter = Math.sqrt(mouseX * mouseX + mouseY * mouseY);
      
  //     // Adjust pulse intensity based on mouse movement
  //     // Mouse movement increases neural activity
  //     const basePulseIntensity = 0.8;
  //     const pulseIntensityVariation = 0.4;
  //     meshRef.current.material.uniforms.pulseIntensity.value = 
  //       basePulseIntensity + pulseIntensityVariation * mouseDistFromCenter;
      
  //     // Adjust noise scale based on mouse Y position for more dynamic effects
  //     meshRef.current.material.uniforms.noiseScale.value = 
  //       5.0 + mouseY * 3.0;
      
  //     // Adjust wireframe thickness based on time for pulsing effect
  //     meshRef.current.material.uniforms.wireframeThickness.value = 
  //       0.03 + Math.sin(state.clock.elapsedTime * 0.8) * 0.01;
      
  //     // Adjust glow intensity based on time for a breathing effect
  //     const baseGlowIntensity = 0.7;
  //     const glowIntensityVariation = 0.3;
  //     meshRef.current.material.uniforms.glowIntensity.value = 
  //       baseGlowIntensity + Math.sin(state.clock.elapsedTime * 0.5) * glowIntensityVariation;
      
  //     // Add subtle rotation to the brain based on mouse position
  //     meshRef.current.rotation.y = -Math.PI/2 + mouseX * 0.1;
  //     meshRef.current.rotation.x = mouseY * 0.1;
      
  //     // Sync wireframe mesh with the main mesh
  //     if (wireframeRef.current) {
  //       wireframeRef.current.rotation.copy(meshRef.current.rotation);
  //     }
  //   }
  // });
  return (
    <group {...props}>
      {/* Main brain mesh with neural shader */}
      <mesh
        ref={meshRef}
        castShadow
        receiveShadow
        geometry={nodes.Stylized_Human_Brain.geometry}
        material={neuralShaderMaterial}
        position={[0, -0.05, 0]} 
        rotation={[0, -Math.PI/2, 0]}
        scale={1.8}
      />
      
      {/* Additional wireframe mesh to enhance the electric effect */}
      {/* <mesh
        ref={wireframeRef}
        castShadow
        receiveShadow
        geometry={nodes.Stylized_Human_Brain.geometry}
        material={wireframeMaterial}
        position={[0, -0.05, 0]} 
        rotation={[0, -Math.PI/2, 0]} 
        scale={1.801} // Slightly larger to prevent z-fighting
      /> */}
      <mesh
        geometry={nodes.Brain_Part_06.geometry}
        material={glowMaterial}
        // rotation={[0, Math.PI/2, -Math.PI/2]}
        scale={0.11} // Slightly larger scale for glow effect
      />
    </group>
  )
}

useGLTF.preload('/models/brain.glb')
